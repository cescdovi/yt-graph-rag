name: CI

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_ETL: ${{ github.repository_owner }}/yt-graph-rag
  
jobs:
  test_and_build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: "3.11"

      - name: Install dependencies (app + dev tools)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          # Herramientas de CI (no están en requirements.txt)
          python -m pip install ruff pytest pytest-cov

      - name: Check linting
        run: ruff check yt_neo4j_etl

      # coverage: herramienta que permite medir qué % del código se ejecutó durante los tests.
      #   Puede tumbar el job si no se llega al mínimo definido (--cov-fail-under).
      #   Genera archivos de cobertura (ej: XML, HTML) con info de qué líneas se ejecutaron.
      # pytest-cov: plugin de pytest que integra coverage.py con pytest, para medir cobertura al correr tests.
      - name: Test with pytest + coverage (fail if <80%)
        shell: bash
        run: |
          set -e
          # Detectar si existen tests en rutas comunes
          if ls tests/*.py tests/**/*.py backend/tests/*.py backend/tests/**/*.py 1> /dev/null 2>&1; then
            python -m pytest -v \
              --cov= yt_neo4j_etl \
              --cov-report=term-missing \
              --cov-report=xml:coverage.xml \
              --cov-fail-under=80
          else
            echo "No tests found. Skipping pytest and coverage."
          fi

          
      # Codecov: herramienta externa que se conecta a GitHub y levanta un dashboard para ver métricas de coverage
      - name: Upload coverage to Codecov
        if: ${{ hashFiles('coverage.xml') != '' }}
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          fail_ci_if_error: true
          # token: {{ secrets.CODECOV_TOKEN }}  # necesario si el repo es privado

      # Subir archivo coverage.xml a GitHub como artifact
      - name: Upload coverage artifact
        if: ${{ hashFiles('coverage.xml') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: error

      # Instala una extensión en la VM que corre el job para compilar imágenes de Docker en diversas arquitecturas (linux/amd64, linux/arm64)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: ${{ hashFiles('Dockerfile') != '' || hashFiles('yt_neo4j_etl/Dockerfile') != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # cuenta que dispara el workflow
          password: ${{ secrets.GITHUB_TOKEN }} # token efímero generado durante la sesión

      # Build desde backend/Dockerfile
      - name: Build and push the Docker image (backend)
        if: ${{ hashFiles('yt_neo4j_etl/Dockerfile') != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./yt_neo4j_etl/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_ETL }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_ETL }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_ETL }}:${{ github.ref_name }}
          # Acelerar build de la imagen
          cache-from: type=gha
          cache-to: type=gha,mode=max

